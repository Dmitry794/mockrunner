package com.mockrunner.test.jdbc;

import java.sql.SQLException;
import java.sql.Statement;

import com.mockrunner.mock.jdbc.MockConnection;
import com.mockrunner.mock.jdbc.MockDatabaseMetaData;
import com.mockrunner.mock.jdbc.MockPreparedStatement;
import com.mockrunner.mock.jdbc.MockResultSet;

import junit.framework.TestCase;

public class MockConnectionTest extends TestCase
{
    public void testDatabaseMetaData() throws SQLException
    {
        MockConnection connection = new MockConnection();
        assertNotNull(connection.getMetaData());
        assertTrue(connection.getMetaData() instanceof MockDatabaseMetaData);
        assertSame(connection, connection.getMetaData().getConnection());
        connection.setMetaData(null);
        assertNull(connection.getMetaData());
        connection.setMetaData(new MockDatabaseMetaData());
        assertNotNull(connection.getMetaData());
        assertTrue(connection.getMetaData() instanceof MockDatabaseMetaData);
        assertSame(connection, connection.getMetaData().getConnection());
    }
    
    public void testPrepareStatementAutoGeneratedKeys() throws SQLException
    {
        MockConnection connection = new MockConnection();
        MockResultSet resultSet = new MockResultSet("testid");
        try
        {
            connection.prepareStatement("select", 50000);
        } 
        catch(SQLException exc)
        {
            //should throw exception
        }
        MockPreparedStatement statement = (MockPreparedStatement)connection.prepareStatement("select", Statement.RETURN_GENERATED_KEYS);
        connection.getPreparedStatementResultSetHandler().prepareGeneratedKeys("select", resultSet);
        statement.execute();
        assertEquals("testid", ((MockResultSet)statement.getGeneratedKeys()).getId());
        statement = (MockPreparedStatement)connection.prepareStatement("select", Statement.NO_GENERATED_KEYS);
        statement.execute();
        assertTrue(((MockResultSet)statement.getGeneratedKeys()).getId().indexOf("testid") < 0);
    }
}
